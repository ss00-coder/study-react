Redux
	상태 관리 라이브러리이며, 리액트 뿐만 아니라 모든 JS코드에서 작동된다.
	Flux 패턴을 기반으로 생성되었기 때문에 단방향으로 동작하여,
	흐름을 파악하기 쉽고 예측 가능하다.

Flux 패턴
	Action이 발생하면 Dispatcher를 통해 Store에 변경된 값이 저장된다.
	View -> Action -> Dispatcher -> Store
	  ↑_______________________________↓

Redux 패턴
	Flux와는 다르게 하나의 App에 하나의 Store가 존재하고, Flux 패턴을 좀 더 쉽게 사용할 수 있는 라이브러리이다.
	Components -> Action -> Reducer -> Store -> State
	    ↑_________________________________________↓

	1. 컴포넌트(Components)
		Action이 발생한다.
		나중에 변경된 state를 반영하기 위해서 Store가 subscribe(구독)을 해놓는다.

	2. 액션(Action)
		변화가 필요할 때 발생시키는 신호.
		dispatch()로 감싸서 Reducer로 전달된다.
		Action에는 type(구분점)을 필수로 담고 필요한 데이터(파라미터)가 있다면 같이 담긴다.
		이후 리듀서에 전달되기 전에 Store에서 state를 가져와 Action과 함께 리듀서에 전달된다.

	3. 리듀서(Reducer)
		전달받은 Action에서 type을 가져온 뒤 구분하여 state를 변경하는 등
		알맞는 로직(함수)이 실행되는 순수 함수이다.

	4. 스토어(Store)
		state를 저장하는 저장소이며,
		subscribe 해놓은 컴포넌트로 가서 변경된 state 값을 전달해준다.

Redux를 사용하는 이유
	컴포넌트의 개수가 늘어나고 구조가 복잡해지면, 관리해야 하는 state가 늘어나고,
	이를 props로 계속 전달하다보면 가독성이 떨어지고 전달을 목적으로 하는 props의 개수가
	늘어나기 때문에 비효율적이다. 또한 props 이름을 변경하게 된다면 모든 props 이름을 수정해야 하므로
	유지보수 및 코드 관리가 좋지 않다.
	따라서 Redux 라이브러리를 사용하게 되면, 하나의 store에 모든 state와 로직을 저장할 수 있으며,
	원하는 컴포넌트에서 바로 사용할 수 있다. 또한 로직을 따로 분리하여 분업이 가능하고 단방향으로 동작하기 때문에
	흐름을 예측하기 쉽다.
	하지만 컴포넌트 구조가 단순하고 소규모 프로젝트일 경우 굳이 Redux 라이브러리를 사용할 필요 없으며,
	무분별하게 사용하면 코드가 오히려 복잡해질 수 있기 때문에,
	여러 곳에서 공용으로 사용되는 state나 초기화되지 않고 계속 유지되어야 하는 state일 경우에만 사용하는 것이 바람직하다.

Redux 원칙
	1. 1개의 App에 1개의 Store만 존재해야 한다.
		여러 개의 Stroe가 있을 경우 코드를 찾아서 수정하는 것이 매우 어려워진다.
		따라서 여러 개의 reducer를 조합하여 하나의 Store로 생성해야 하며, 조합할 때에는
		combineReducers()를 사용해서 하나의 store로 묶어준다.

	2. state는 불변성을 가져야 한다.
		기존의 state는 수정하지 않고 새로운 객체를 넣어주어야 변경이 감지된다.
		또한 라이프사이클에서 이전 state 값을 기억시키기 위해서도 새로운 객체를 전달하여
		불변성을 유지해야 하고, 불변성을 가져야 하는 이유는 좋은 성능을 위해서 깊은 탐색이 아닌
		얕은 탐색으로 검사하기 때문이다.

	3. 리듀서는 반드시 순수 함수로 만들어야 한다.
		입력값과 출력값이 똑같아야 하며, state는 변경하지 말고 action을 통해
		변경한 새로운 state 객체를 만든 뒤 리턴해야 한다는 뜻이다.
		date, random(), fetch() 등과 같이 실행할 때마다 다른 결과 값이 나타나는 작업은
		리듀서 함수 밖에서 처리해주어야 한다.
		이러한 작업은 추후 미들웨어에서 작업하게 된다.

Middleware
	Redux의 기능을 확장시켜서 Action을 전달받아 로직을 처리한다.
	Reducer로 가기 전에 API 호출 및 예측 불가능한 로직들을 처리한 뒤 Reducer로 Action을 전달하여
	state가 update된다. 이로 인해 Reducer는 순수 함수를 유지할 수 있게 된다.
	즉, Reducer로 가기 전에 서버에 데이터 요청을 해서 값을 가져오라는 뜻이다.
				
				   API
				    ↕
	Components -> Action -> Middleware -> Reducer -> Store -> State
	    ↑_______________________________________________________↓


	1. 컴포넌트(Components)
		Action이 발생한다.
		나중에 변경된 state를 반영하기 위해서 Store가 subscribe(구독)을 해놓는다.

	2. 액션(Action)
		변화가 필요할 때 발생시키는 신호.
		dispatch()로 감싸서 Reducer로 전달된다.
		Action에는 type(구분점)을 필수로 담고 필요한 데이터(파라미터)가 있다면 같이 담긴다.
		이후 리듀서에 전달되기 전에 Store에서 state를 가져와 Action과 함께 middleware가 작동한다.

	3. 미들웨어(Middleware)
		Action과 state를 전달받아서 Side Effect 코드를 실행한다.
		이후 Action과 state를 리듀서로 전달한다.

	4. 리듀서(Reducer)
		전달받은 Action에서 type을 가져온 뒤 구분하여
		state를 변경하는 등 알맞는 로직(함수)이 실행된다.

	5. 스토어(Store)
		state를 저장하는 저장소이며,
		subscribe 해놓은 컴포넌트로 가서 변경된 state 값을 전달해준다.


정리
	Component에서 버튼을 클릭해서
	해당 액션이 발생하고
	액션을 미들웨어가 가로채서
	type이 "가져와 서버 데이터!"일 때
	type에 맞는 saga 함수가 실행되어 API를 통해 데이터를 가져오고,
	가져온 데이터와 type을 reducer에게 전달하여 그 다음 어떤 로직을 수행할 지 알게 하고,
	store의 state에 미들웨어에서 가져온 데이터를 넣어주고,
	구독한 Component에 state를 전달해준다.

























